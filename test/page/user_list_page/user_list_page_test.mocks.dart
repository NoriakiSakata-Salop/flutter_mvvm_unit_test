// Mocks generated by Mockito 5.4.4 from annotations
// in flavor_assets_bundle/test/page/user_list_page/user_list_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flavor_assets_bundle/controller/user_list_page_controller/user_list_page_controller.dart'
    as _i4;
import 'package:flavor_assets_bundle/controller/user_list_page_controller/user_list_page_state.dart'
    as _i3;
import 'package:flavor_assets_bundle/model/user/user.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserListPageState_2 extends _i1.SmartFake
    implements _i3.UserListPageState {
  _FakeUserListPageState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserListPageController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserListPageController extends _i1.Mock
    implements _i4.UserListPageController {
  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<_i3.UserListPageState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeAsyncNotifierProviderRef_0<_i3.UserListPageState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAutoDisposeAsyncNotifierProviderRef_0<_i3.UserListPageState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeAsyncNotifierProviderRef<_i3.UserListPageState>);

  @override
  _i2.AsyncValue<_i3.UserListPageState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<_i3.UserListPageState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAsyncValue_1<_i3.UserListPageState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i3.UserListPageState>);

  @override
  set state(_i2.AsyncValue<_i3.UserListPageState>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.UserListPageState> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue:
            _i5.Future<_i3.UserListPageState>.value(_FakeUserListPageState_2(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.UserListPageState>.value(_FakeUserListPageState_2(
          this,
          Invocation.getter(#future),
        )),
      ) as _i5.Future<_i3.UserListPageState>);

  @override
  _i5.Future<_i3.UserListPageState> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue:
            _i5.Future<_i3.UserListPageState>.value(_FakeUserListPageState_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.UserListPageState>.value(_FakeUserListPageState_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
      ) as _i5.Future<_i3.UserListPageState>);

  @override
  _i5.Future<List<_i6.User>?> fetchUsers() => (super.noSuchMethod(
        Invocation.method(
          #fetchUsers,
          [],
        ),
        returnValue: _i5.Future<List<_i6.User>?>.value(),
        returnValueForMissingStub: _i5.Future<List<_i6.User>?>.value(),
      ) as _i5.Future<List<_i6.User>?>);

  @override
  _i5.Future<_i3.UserListPageState> update(
    _i5.FutureOr<_i3.UserListPageState> Function(_i3.UserListPageState)? cb, {
    _i5.FutureOr<_i3.UserListPageState> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue:
            _i5.Future<_i3.UserListPageState>.value(_FakeUserListPageState_2(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.UserListPageState>.value(_FakeUserListPageState_2(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
      ) as _i5.Future<_i3.UserListPageState>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i3.UserListPageState>? previous,
    _i2.AsyncValue<_i3.UserListPageState>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
